esphome:
  name: cyd-temp
  platformio_options:
    upload_speed: 115200

esp32:
  board: esp32dev

logger:
  level: DEBUG

api:

ota:
  - platform: esphome

wifi:
  ssid: "Cudy-7E84-5G"
  password: "34098080"

color:
  - id: my_blue
    red: 0%
    green: 0%
    blue: 100%
  - id: my_white
    red: 100%
    green: 100%
    blue: 100%
  - id: my_black
    red: 0%
    green: 0%
    blue: 0%

uart:
  id: uart_bus
  rx_pin: GPIO22
  baud_rate: 9600

sensor:
  - platform: template
    name: "Temperature"
    id: temp_sensor
    unit_of_measurement: "Â°C"
    accuracy_decimals: 1

  - platform: template
    name: "Humidity"
    id: humidity_sensor
    unit_of_measurement: "%"
    accuracy_decimals: 1

interval:
  - interval: 100ms
    then:
      - lambda: |-
          static String buffer = "";
          while (id(uart_bus).available()) {
            uint8_t c;
            id(uart_bus).read_byte(&c);
            if (c == '\n') {
              ESP_LOGD("uart", "Received: %s", buffer.c_str());
              int t_pos = buffer.indexOf("T:");
              int h_pos = buffer.indexOf("H:");
              if (t_pos >= 0 && h_pos >= 0) {
                String temp_str = buffer.substring(t_pos + 2, buffer.indexOf(',', t_pos));
                String hum_str = buffer.substring(h_pos + 2);
                float temp = temp_str.toFloat();
                float hum = hum_str.toFloat();
                id(temp_sensor).publish_state(temp);
                id(humidity_sensor).publish_state(hum);
                ESP_LOGD("uart", "Temp: %.1f, Humidity: %.1f", temp, hum);
              }
              buffer = "";
            } else if (c != '\r') {
              buffer += (char)c;
            }
          }

output:
  - platform: ledc
    pin: GPIO21
    id: backlight_pwm

light:
  - platform: monochromatic
    output: backlight_pwm
    name: Display Backlight
    id: backlight
    restore_mode: ALWAYS_ON

spi:
  - id: tft
    clk_pin: GPIO14
    mosi_pin: GPIO13
    miso_pin: GPIO12

display:
  - platform: ili9xxx
    model: ILI9341
    spi_id: tft
    cs_pin: GPIO15
    dc_pin: GPIO2
    color_palette: 8BIT
    rotation: 90
    color_order: bgr
    invert_colors: false
    dimensions:
      width: 240
      height: 320
    lambda: |-
      it.fill(my_black);
      it.printf(160, 100, id(helvetica_24), id(my_white), TextAlign::CENTER, "Temperatura: %.1f C", id(temp_sensor).state);
      it.printf(160, 140, id(helvetica_24), id(my_white), TextAlign::CENTER, "Vlaznost: %.1f%%", id(humidity_sensor).state);

font:
  - file: "Helvetica.ttf"
    id: helvetica_14
    size: 14
  - file: "Helvetica.ttf"
    id: helvetica_16
    size: 16
  - file: "Helvetica.ttf"
    id: helvetica_18
    size: 12
  - file: "Helvetica.ttf"
    id: helvetica_20
    size: 20
  - file: "Helvetica.ttf"
    id: helvetica_24
    size: 24
